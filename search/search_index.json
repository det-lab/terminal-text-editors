{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#project-layout","title":"Project layout","text":"<p>Created by Adrian Fisher</p> <pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md           # The documentation homepage.\n    01_introduction.md # Introduction to terminal-based text editors\n    02_nano.md         # Further instructions for nano\n    03_vim.md          # Further instructions for vim\n    04_emacs.md        # Further instructions for emacs\n</code></pre>"},{"location":"01_introduction/","title":"Introduction","text":"<p>From the top of this lesson it should be stated that terminal-based/command-line text editors are useful mainly for advanced programming. They definitely have their advantages over their GUI-based counterparts, such as being less memory intensive, more ubiquitous, and more efficient for experienced users, but their advantages are often outweighed by the entry-level useability of coding environments such as Visual Studio Code for more basic applications. </p> <p>In general, it's recommended to avoid terminal-based text editors unless you have to use them. There are a few times when command-line editing will pop-up automatically, but for the most part these can be rerouted to use GUI editors as well. For instance, here is a tutorial for running SSH from Visual Studio Code, and here's another one for making Visual Studio Code your default git editor (although you can also avoid being in an editor for git by using an application such as Github Desktop or by using the command <code>git commit -m \"commit message here\"</code>.)</p> <p>All that being said: when utilized to their fullest, text editors can streamline several tasks in ways that GUIs would struggle to match. In this lesson, we're going to go over the bare-bones basics of terminal-based text editors for the three most common options: <code>Vim</code>, <code>Emacs</code>, and <code>nano</code>, with short instructions for each on how to: * Open a file, * Edit or insert text into a file, * Save a file and keep your changes, * Close a file and/or discard your changes, and * Search for text within a file.</p>"},{"location":"01_introduction/#choosing-an-editor","title":"Choosing an editor","text":"<p>When selecting an editor, the right choice for you will depend on your needs, experience level, and editing habits: * <code>nano</code> is best for beginners or quick edits, with a simple interface that includes helpful commands at the bottom of the screen. If you're only intending on changing a config file or writing a short script without learning many commands, <code>nano</code> is ideal.  * <code>Vim</code> offers speed and precision for experienced users. Once learned, <code>Vim</code> is extremely efficient for navigating and editing code or text at high speed. Choose <code>Vim</code> if you work frequently in the terminal and want a powerful, scriptable tool.  * <code>Emacs</code> is a full-fledged programmable environment, not just an editor. It supports extensive customization, plugins, and even embedded shells or mail clients. It's a strong choice if you prefer a keyboard-driven workflow and want to integrate many tools into a single interface, but has a steeper learning curve than the other two editors. The latest version of <code>Emacs</code> can be downloaded by following this link to the official site.</p> <p>Let's get started by learning the basics of the easiest of the three options: <code>nano</code>. Click here to continue on to the next section.</p>"},{"location":"02_nano/","title":"Nano","text":"<p>One of the main benefits to <code>nano</code> is the two help lines at the bottom of the window, showing you a list of commands that you can use. </p> <p></p> <p>Each of the <code>^</code> symbols is meant to be typed by the user as <code>CTRL</code>, so you can access <code>Help</code> as <code>CTRL+G</code>, <code>Exit</code> by typing <code>CTRL+X</code>, etc.</p> <p>The latest version of <code>nano</code> can be downloaded by following this link to the official site.</p>"},{"location":"02_nano/#basic-commands","title":"Basic Commands:","text":"<p>Here are the core actions that you'll use most often in <code>nano</code>.</p>"},{"location":"02_nano/#open-a-file","title":"Open a File","text":"<pre><code>nano filename.txt\n</code></pre> <ul> <li>Opens the file if it exists, or creates a new one if it doesn't.</li> </ul>"},{"location":"02_nano/#edit-or-insert-text","title":"Edit or Insert Text","text":"<ul> <li>Simply start typing. <code>nano</code> is always in insert mode.</li> <li>Use arrow keys to move the cursor. </li> </ul>"},{"location":"02_nano/#savewrite-changes","title":"Save/Write Changes","text":"<ul> <li>Press <code>CTRL+O</code> (<code>Write Out</code> option)</li> </ul>"},{"location":"02_nano/#close-the-file","title":"Close the File","text":"<ul> <li>Press <code>CTRL+X</code></li> </ul> <p>If you've made unsaved changes, <code>nano</code> will ask:</p> <pre><code>Save modified buffer (ANSWERING \"No\" WILL DESTROY CHANGES)?\n</code></pre> <ul> <li>Press <code>N</code> to discard changes and exit.</li> </ul>"},{"location":"02_nano/#search-for-text","title":"Search for Text","text":"<ul> <li>Press <code>CTRL+W</code></li> <li>Type your search term and press <code>Enter</code></li> <li>Press <code>CTRL+W</code> again and then <code>Enter</code> to find the next match. By default, <code>nano</code> does not use regex. It instead searches using plain text. However, you can enable regex with the <code>-R</code> or <code>--regexp</code> option:</li> </ul> <pre><code>nano --regexp filename.txt\n</code></pre> <p>Now when you press <code>CTRL+W</code> to start a search you can type a regular expression pattern and then press <code>Enter</code> to find matches.</p> <p>For further questions regarding <code>nano</code>, refer to the documentation by following this link.</p> <p>Click here to continue on to the next section to learn the basics for <code>Vim</code>.</p>"},{"location":"03_vim/","title":"Vim Basics","text":"<p><code>Vim</code> is customizable and extensible, making it especially useful for users who want a more flexible environment at the cost of creating a slightly steeper learning curve that makes it less accessible for beginners. </p> <p>The latest version of <code>Vim</code> can be downloaded by following this link to the official site.. You can also install it from your terminal by running:</p> <pre><code>sudo apt-get install vim\n</code></pre> <p>From there, to open <code>Vim</code>, simply enter:</p> <pre><code>vim\n</code></pre> <p>This will open a screen like the following, displaying info about <code>Vim</code> and some instructions for exiting the editor or finding help.</p> <p></p> <p>One of the more important concepts in <code>Vim</code> is working with \"modes.\" Depending on the mode, typed characters can be interpreted by <code>Vim</code> as sequences of commands or they can be inserted as text. There are 7 BASIC modes, and 7 ADDITIONAL modes which are variants of the BASIC modes. For more information about modes, follow this link to the official documentation.</p>"},{"location":"03_vim/#basic-commands","title":"Basic Commands:","text":"<p>For the basic commands in <code>Vim</code>, the only modes you'll need to switch between are Normal/Command mode, Insert mode, and Command-line/Cmdline mode. </p> <p>Here's a quick chart on switching between the relevant modes: | FROM \\(\\downarrow\\) TO \\(\\to\\) | Normal | Insert                       | Cmdline    | | ---                        |  ---   |  ---                         |  ---       | | Normal                     |        | i, I, a, A, o, O, c, C, s, S | :, /, ?, ! | | Insert                     | Esc    |                              | N/A        | | Command-line               | 1     | :start                       |            | For a more complete chart showing the switch commands between all 7 BASIC modes, follow this link to the official documentation. 1 - Go from Command-line to Normal by: * Hitting  or , which causes the entered command to be executed. * Deleting the complete line, such as with <code>CTRL+U</code>, and giving a final . * Hitting <code>CTRL+C</code> or <code>Esc</code>, which quits without executing the command."},{"location":"03_vim/#open-a-file","title":"Open a File","text":"<pre><code>vim filename.txt\n</code></pre> <ul> <li>Opens the file for editing. If one doesn't exist, <code>vim</code> automatically creates a new one.</li> </ul>"},{"location":"03_vim/#edit-or-insert-text","title":"Edit or Insert Text","text":"<ul> <li>Switch to Insert mode with one of the above commands.</li> <li>You can now type and edit text as in a regular editor.</li> </ul>"},{"location":"03_vim/#save-changes","title":"Save Changes","text":"<ul> <li>Ensure you are in Normal mode by pressing the <code>Esc</code> key.</li> <li>Type <code>:w</code> and press <code>Enter</code> (This writes the file to disk.)</li> </ul>"},{"location":"03_vim/#save-and-quit","title":"Save and Quit","text":"<ul> <li>Press <code>Esc</code>, then type:</li> </ul> <pre><code>:wq\n</code></pre> <p>and press <code>Enter</code>.</p>"},{"location":"03_vim/#quit-without-saving","title":"Quit Without Saving","text":"<ul> <li>Press <code>Esc</code>, then type:</li> </ul> <pre><code>:q!\n</code></pre> <p>and press <code>Enter</code>.</p>"},{"location":"03_vim/#search-for-text","title":"Search for Text","text":""},{"location":"04_emacs/","title":"Emacs Basics","text":""},{"location":"04_emacs/#basic-commands","title":"Basic Commands:","text":""},{"location":"04_emacs/#open-a-file","title":"Open a File","text":""},{"location":"04_emacs/#edit-or-insert-text","title":"Edit or Insert Text","text":""},{"location":"04_emacs/#savewrite-changes","title":"Save/Write Changes","text":""},{"location":"04_emacs/#save-and-quit","title":"Save and Quit","text":""},{"location":"04_emacs/#quit-without-saving","title":"Quit Without Saving","text":""},{"location":"04_emacs/#search-for-text","title":"Search for Text","text":""}]}